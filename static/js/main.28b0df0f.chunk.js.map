{"version":3,"sources":["Big2.js","App.js","reportWebVitals.js","index.js"],"names":["SUITS","RANKS","PlayingCard","constructor","suit","rank","this","toString","concat","getValue","indexOf","length","Big2Game","deck","setDeck","useState","players","setPlayers","currentPlayer","setCurrentPlayer","lastPlay","setLastPlay","selectedCards","setSelectedCards","startingPlayer","setStartingPlayer","gameRule","setGameRule","useEffect","initializeGame","newDeck","forEach","push","i","j","Math","floor","random","newPlayers","hand","index","some","card","React","createElement","className","htmlFor","id","value","onChange","event","target","map","key","style","fontWeight","display","flexDirection","sort","a","b","cardIndex","Card","color","margin","border","selected","width","height","onClick","handleCardClick","playerIndex","findIndex","c","filter","_","Body","alignItems","fontSize","justifyContent","borderLine","handlePlay","isValid","message","isValidPlay","selectedValues","lastPlayValues","alert","App","Big2","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.28b0df0f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n//import { Card } from '@/components/ui/card';\r\nimport { Card } from 'react-bootstrap'\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst SUITS = ['♦', '♣', '♥', '♠'];\r\nconst RANKS = ['3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A', '2'];\r\n\r\n// 카드 클래스 정의\r\nclass PlayingCard {\r\n    constructor(suit, rank) {\r\n        this.suit = suit;\r\n        this.rank = rank;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.suit}${this.rank}`;\r\n    }\r\n\r\n    // 카드 비교를 위한 값 계산\r\n    getValue() {\r\n        return SUITS.indexOf(this.suit) + SUITS.length * RANKS.indexOf(this.rank);\r\n    }\r\n}\r\n// eslint-disable-next-line\r\nconst Big2Game = () => {\r\n    // eslint-disable-next-line\r\n    const [deck, setDeck] = useState([]);\r\n    const [players, setPlayers] = useState([[], [], [], []]);\r\n    const [currentPlayer, setCurrentPlayer] = useState(null);\r\n    const [lastPlay, setLastPlay] = useState([]);\r\n    const [selectedCards, setSelectedCards] = useState([]);\r\n    const [startingPlayer, setStartingPlayer] = useState(null);\r\n    const [gameRule, setGameRule] = useState('default');\r\n\r\n    // 덱 초기화 및 카드 분배\r\n    useEffect(() => {\r\n        //console.log('Big2Game component rendered');\r\n        initializeGame();\r\n    }, []);\r\n\r\n    const initializeGame = () => {\r\n        // 덱 생성\r\n        const newDeck = [];\r\n        SUITS.forEach(suit => {\r\n            RANKS.forEach(rank => {\r\n                newDeck.push(new PlayingCard(suit, rank));\r\n            });\r\n        });\r\n\r\n        // 덱 셔플\r\n        for (let i = newDeck.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [newDeck[i], newDeck[j]] = [newDeck[j], newDeck[i]];\r\n        }\r\n\r\n        // 카드 분배\r\n        const newPlayers = [[], [], [], []];\r\n        for (let i = 0; i < 52; i++) {\r\n            newPlayers[i % 4].push(newDeck[i]);\r\n        }\r\n\r\n        // 다이아몬드3 가진 플레이어 찾기\r\n        let startingPlayer = -1;\r\n        newPlayers.forEach((hand, index) => {\r\n            if (hand.some(card => card.suit === '♦' && card.rank === '3')) {\r\n                startingPlayer = index;\r\n            }\r\n        });\r\n\r\n        setDeck(newDeck);\r\n        setPlayers(newPlayers);\r\n        setCurrentPlayer(startingPlayer);\r\n        setStartingPlayer(startingPlayer);\r\n    };\r\n\r\n    const handleCardClick = (playerIndex, card) => {\r\n        if (playerIndex !== currentPlayer) return;\r\n\r\n        const cardIndex = selectedCards.findIndex(c =>\r\n            c.suit === card.suit && c.rank === card.rank\r\n        );\r\n\r\n        if (cardIndex === -1) {\r\n            setSelectedCards([...selectedCards, card]);\r\n        } else {\r\n            setSelectedCards(selectedCards.filter((_, i) => i !== cardIndex));\r\n        }\r\n    };\r\n\r\n    // 카드플레이 검증증\r\n\r\n    const isValidPlay = (selectedCards, lastPlay) => {\r\n        if (lastPlay.length === 0) return { isValid: true, message: '' };\r\n\r\n        if (selectedCards.length !== lastPlay.length) {\r\n            return { isValid: false, message: 'The number of cards played must match the last play.' };\r\n        }\r\n\r\n        const selectedValues = selectedCards.map(card => card.getValue()).sort((a, b) => a - b);\r\n        const lastPlayValues = lastPlay.map(card => card.getValue()).sort((a, b) => a - b);\r\n\r\n        if (selectedValues[0] <= lastPlayValues[0]) {\r\n            return { isValid: false, message: 'The played cards must be higher than the last play.' };\r\n        }\r\n\r\n        return { isValid: true, message: '' };\r\n    };\r\n\r\n    const handlePlay = () => {\r\n        // 여기에 카드 플레이 검증 로직 추가 필요\r\n        if (selectedCards.length === 0) {\r\n            // Pass\r\n            setCurrentPlayer((currentPlayer + 1) % 4);\r\n            setSelectedCards([]);\r\n            return;\r\n        }\r\n\r\n        // Check the Play Rule\r\n\r\n        const { isValid, message } = isValidPlay(selectedCards, lastPlay);\r\n        if (!isValid) {\r\n            alert(`Invalid play: ${message}`);\r\n            return;\r\n        }\r\n\r\n\r\n        // 카드 플레이 실행\r\n        const newPlayers = [...players];\r\n        newPlayers[currentPlayer] = players[currentPlayer].filter(card =>\r\n            !selectedCards.some(selected =>\r\n                selected.suit === card.suit && selected.rank === card.rank\r\n            )\r\n        );\r\n\r\n        setPlayers(newPlayers);\r\n        setLastPlay(selectedCards);\r\n        setSelectedCards([]);\r\n        setCurrentPlayer((currentPlayer + 1) % 4);\r\n    };\r\n\r\n    const handleRuleChange = (event) => {\r\n        setGameRule(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4\">\r\n            {currentPlayer === startingPlayer && (\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"gameRule\">Select Game Rule: </label>\r\n                    <select id=\"gameRule\" value={gameRule} onChange={handleRuleChange}>\r\n                        <option value=\"default\">Default</option>\r\n                        <option value=\"rule1\">Rule 1</option>\r\n                        <option value=\"rule2\">Rule 2</option>\r\n                    </select>\r\n                </div>\r\n            )}\r\n            <div className=\"grid grid-cols-1 gap-4\">\r\n                {players.map((hand, index) => (\r\n                    <div key={index}>\r\n                        <h3 style={currentPlayer === index ? { fontWeight: 'bold' } : {}}>\r\n                            {startingPlayer === index ? '*' : ''} Player {index + 1}\r\n                        </h3>\r\n                        <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n                            {hand.sort((a, b) => a.getValue() - b.getValue()).map((card, cardIndex) => (\r\n                                <Card key={cardIndex} style={{\r\n                                    color: (card.suit === '♦' || card.suit === '♥') ? 'red' : 'blue',\r\n                                    margin: '5px', border: selectedCards.some(selected => selected.suit === card.suit && selected.rank === card.rank)\r\n                                        ? '2px solid blue'\r\n                                        : '1px solid gray',\r\n                                    width: '90px', // Set a fixed width\r\n                                    height: '90px' // Set a fixed height\r\n                                }}\r\n                                    onClick={() => handleCardClick(index, card)}>\r\n                                    <Card.Body>\r\n                                        <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                                            <div style={{ fontWeight: 'bold', fontSize: '24px' }}>{card.suit}</div>\r\n                                            <div style={{ fontWeight: 'bold', fontSize: '24px' }}>{card.rank}</div>\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"mt-4 w-full flex flex-row items-center\">\r\n                <h3 className=\"font-bold\">Last Play: </h3>\r\n                <div className=\"w-full flex items-center justify-center\" style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center' }}>\r\n                    {lastPlay.map((card, index) => (\r\n                        <span key={index} style={{\r\n                            display: 'flex items-center',\r\n                            color: (card.suit === '♦' || card.suit === '♥') ? 'red' : 'blue', width: '50px',\r\n                            height: '35px', margin: '5px',\r\n                            borderLine: '5px'\r\n                        }}>\r\n\r\n                            <div style={{ fontWeight: 'bold', fontSize: '24px' }}>\r\n                                {card.suit}{card.rank}\r\n                            </div>\r\n\r\n                        </span>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"mt-4 w-full flex justify-center\">\r\n                <button\r\n                    className=\"px-4 py-2 bg-blue-500 text-black rounded\"\r\n                    onClick={handlePlay}\r\n                >\r\n                    {selectedCards.length === 0 ? 'Pass' : 'Play'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Big2Game;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Big2 from './Big2';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> This is Big2Game for four players</h1>\n      <Big2 />\n    </div>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}